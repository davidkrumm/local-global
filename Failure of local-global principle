/*
This is an implementation of Algorithm 3.8 in the article "A local-global principle in the dynamics of quadratic polynomials".
Assuming f is a quadratic polynomial and n is a positive integer for which the local-global principle fails, this code
produces a finite list of groups containing a group isomorphic to the Galois group of the n-th dynatomic polynomial of f.
*/

//Given n, computes the degree of the n-th dynatomic polynomial of a quadratic polynomial.
dynatomic_degree := function(n)
degree := 0;
for d in Divisors(n) do
degree := degree + MoebiusMu(ExactQuotient(n,d))*2^d;
end for;
return degree;
end function;

//This procedure computes a list of possible Galois groups of the n-th dynatomic polynomial.
galois_candidates := procedure(n);
N := dynatomic_degree(n);
print "Degree of dynatomic polynomial: N =", N;
r := ExactQuotient(N,n);
print "Number of cycles: r =", r;

//Build the permutation pi
cycles := [ ];
for i := 0 to r - 1 do
cycle_i := {@ @}; //the i-th cycle in the decomposition of pi
cycle_base := n*i;
for j := 1 to n do
Include(~cycle_i, cycle_base + j);
end for;
Append(~cycles, cycle_i);
end for;
SN := Sym(N);
pi := SN ! cycles;
print "permutation pi:", pi;

//Compute the centralizer of pi and find representatives for the conjugacy classes of subgroups of this centralizer.
W := Centralizer(SN, pi);
print "Order of W:", Order(W);
print "Generators of W:", FewGenerators(W);
W_classes := SubgroupClasses(W);
W_subgroups := {}; //contains representatives for the conjugacy classes
for class in W_classes do
Include(~W_subgroups, class`subgroup);
end for;
print "Number of conjugacy classes:", #W_subgroups;

//Compute the necessary stabilizers in W and store their union.
stabilizers := [* *];
stabilizer_union := {};
for i := 1 to r do
S_i := ElementSet(W, Stabilizer(W, n*i));
Append(~stabilizers, S_i);
stabilizer_union := stabilizer_union join S_i;
end for;
//print "Stabilizers:", stabilizers;
//print "Stabilizer union:", stabilizer_union;

//Determine the list of candidates for the Galois group of the n-th dynatomic polynomial
L := {};
for H in W_subgroups do
H_set := ElementSet(W, H);
if H_set subset stabilizer_union then
is_not_contained_in_stabilizer := true;
for i := 1 to r do
if H_set subset stabilizers[i] then
is_not_contained_in_stabilizer := false;
break;
end if;
end for;
if is_not_contained_in_stabilizer then
Include(~L, H);
end if;
end if;
end for;

print "Candidate subgroups and their corresponding set of indices:";
for H in L do
print "\nSubgroup order:", Order(H);
print "Subgroup generators:", FewGenerators(H);
indices := {};
for i := 1 to r do
Include(~indices, Index(H, Stabilizer(H, n*i)));
end for;
print "Stabilizer indices:", indices;
end for;
end procedure;